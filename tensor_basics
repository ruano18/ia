import torch

#en pythorch todo esta basado en operaciones tensoriales
#un tensor vive en RnxRmxRoxRp ... etc

#escalar vacio (trae basura)
x = torch.empty(1) # scalar
print(x)

#vector en R3
x = torch.empty(3) # vector, 1D
print(x)

#tensor en R2xR3
x = torch.empty(2,3) # matrix, 2D
print(x)

#tensor en R2xR2xR3
x = torch.empty(2,2,3) # tensor, 3 dimensions
#x = torch.empty(2,2,2,3) # tensor, 4 dimensions
print(x)

# torch.rand(size): numeros aleatorios [0, 1]
#tensor de numeros aleatorios en R5xR3
x = torch.rand(5, 3)
print(x)

# torch.zeros(size), llenar con 0
# torch.ones(size), llenar con 1
# tensor de R5xR3 lleno de ceros
x = torch.zeros(5, 3)
print(x)

# checar tamaño
print(x.size())

# checar tipo de datos (default es float32)
print(x.dtype)

# especificando tipo de datos
x = torch.zeros(5, 3, dtype=torch.float16)
print(x)

# checar tipo
print(x.dtype)

# construir vector desde datos
x = torch.tensor([5.5, 3])
print(x.size())

# vector optimizable
x = torch.tensor([5.5, 3], requires_grad=True)

# operanciones
y = torch.rand(2, 2)
x = torch.rand(2, 2)

# suma de tensores
z = x + y
z = torch.add(x,y)
y.add_(x)

# resta de tensores
z = x - y
z = torch.sub(x, y)

# multiplicacion
z = x * y
z = torch.mul(x,y)

# division
z = x / y
z = torch.div(x,y)

# rebanadas
x = torch.rand(5,3)
print(x)
print(x[:, 0]) # all rows, column 0
print(x[1, :]) # row 1, all columns
print(x[1,1]) # element at 1, 1

# valor del elemento en (1,1)
print(x[1,1].item())

# cambiar forma con torch.view()
x = torch.randn(4, 4)
y = x.view(16)
z = x.view(-1, 8)  # -1: se infiere de las otras dimensiones
# si -1 pytorch determinara automaticamente el tamaño necesario
print(x.size(), y.size(), z.size())

#convertir un tensor en arreglo de numpy y viceversa
a = torch.ones(5)
print(a)
b = a.numpy()
print(b)
print(type(b))

#le suma 1 a todas las entradas
a.add_(1)
print(a)
print(b)

# de numpy a torch
import numpy as np
a = np.ones(5)
b = torch.from_numpy(a)
print(a)
print(b)

# le suma 1 a todas las entradas de a 
a += 1
print(a)
print(b)

#de CPU a GPU (si hay cuda)
if torch.cuda.is_available():
    device = torch.device("cuda")          # a CUDA tarjeta de video
    y = torch.ones_like(x, device=device)  
    x = x.to(device)                       # crear tensor en el GPU
    z = x + y
    # z = z.numpy() # not possible because numpy cannot handle GPU tenors
    # move to CPU again
    z.to("cpu")       # ``.to`` can also change dtype together!
    # z = z.numpy()
