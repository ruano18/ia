#------------------------------------------------------
# algoritmo genetico
# maximo de una funcion
#------------------------------------------------------
import matplotlib.pyplot as plt
imort numpy as np
import math

#------------------------------------------------------
# funcion de muchos máximos
#------------------------------------------------------
def fx(x):
  return -(0.1+(1-x)**2-0.1*math.cos(6*math.pi*(1-x)))+2

#------------------------------------------------------
# de lista a decimal
#------------------------------------------------------
def listToDecimal(num):
  decimal:np.float64 = 0
  for i in range(len(num)):
    decimal+=num[i]*10**(-i)
  return decimal

#------------------------------------------------------
# mutaciones
#------------------------------------------------------
def mutate(individuals, prob, pool):

  for i in range(len(induviduals)):
    mutate_individual=individuals[i]
    if np.random.random() < prob: 
      mutatioen = np.random.choice(pool[0])
      mutate_individual = [mutation] + mutate_individual[1:]

  for j in range(1, len(mutate_induvidual)):
    if np.random.random() < prob: 
      mutatioen = np.random.choice(pool[1])
      mutate_individual = [mutation] + mutate_individual[0:j] + mutate_individual[j+1:]
    individuals[i] = mutate_individual

#------------------------------------------------------
# programa principal
#------------------------------------------------------
x_axis = np.arange(0,2,0.02)
y_axis = np.array(list(map(fx,x_axis)))

#------------------------------------------------------
# nucleotidos
#------------------------------------------------------
ind_size = 15
genetic_pool = [[0,1],[0,2,3,4,5,6,7,8,9]]

#------------------------------------------------------
# poblacion
#------------------------------------------------------
poblacion = []
for i in range(100):
  individuo = []
  individuo += [np.random.choice(genetic_pool[0])]
  individuo += list(np.random.choice(genetic_pool[1],ind_size-1))
  np.array(individuo)
  poblacion.append(individuo)
np.array(poblacion)

#------------------------------------------------------
# evolucion
#------------------------------------------------------
size_poblacio = len(poblacion)
generaciones = 300
for _ in range(generaciones):
  fitness = []
  for individuo in poblacion: 
    x = listToDecimal(individuo)
    y = fx(x)
    fitness += [y]
  fitness = np.array(fitness)
  fitness = fitness/fitness.sum()
  offspring = []
  for i in range(size_poblaion//2):
    parents = np.random.choices(size_poblacion, 2, p=fitness)
    cross_point = np.random.randint(ind_size)
    offspring += [poblacion[parents[0]][:cross_point] + poblacion[parents[1]][cross_point:]]
    offspring += [poblacion[parents[1]][:cross_point] + poblacion[parents[0]][cross_point:]]
    np.array(offspring)
    poblacion = offspring
    mutate(poblacion, 0.005, genetic_pool)

#------------------------------------------------------
# el más apto
#------------------------------------------------------
n = np.where(fitness == fitness.max())
if np.size(n[0]) == 1:
  print(listToDecimal(poblacion[int(n[0])]))
else: 
  print("la solucion no fue unica")

#------------------------------------------------------
# gráfica
#------------------------------------------------------
for individuo in poblacion: 
  x = listToDecimal(individuo)
  y = fx(x) 
  plt.plot(x,y,'x')
plt.plot(x_axis,y_axis)
plt.show()















































